// Created by Microsoft (R) C/C++ Compiler Version 11.00.50522.1 (4787162d).
//
// c:\program files (x86)\research in motion\blackberry jde 4.5.0\samples\usbclient - copie\debug\bbdevmgr.tlh
//
// C++ source equivalent of Win32 type library BBDevMgr.exe
// compiler-generated file created 07/15/12 at 21:30:10 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("3205cf2e-ca6a-40fa-838c-ec38e0ab74f0"))
/* LIBID */ __BBDEVMGRLib;
struct __declspec(uuid("aefa9d6f-31df-420f-89b3-f875203055c6"))
/* interface */ IDeviceSafe;
struct __declspec(uuid("c7168312-a0f4-46df-b82a-548cfb08755e"))
/* interface */ IChannelEvents;
struct __declspec(uuid("c7168311-a0f4-46df-b82a-548cfb08755e"))
/* interface */ IChannel;
struct __MIDL___MIDL_itf_BbDevMgr_0000_0006_0001;
struct __declspec(uuid("c716830e-a0f4-46df-b82a-548cfb08755e"))
/* interface */ IDevice;
struct __declspec(uuid("c716830f-a0f4-46df-b82a-548cfb08755e"))
/* interface */ IDeviceProperties;
struct __declspec(uuid("c7168310-a0f4-46df-b82a-548cfb08755e"))
/* interface */ IDeviceProperty;
struct __declspec(uuid("895d12e1-4e20-4cba-9a8b-e80e080fad74"))
/* interface */ IDevice_140;
struct __declspec(uuid("c716830c-a0f4-46df-b82a-548cfb08755e"))
/* interface */ IDeviceManagerEvents;
struct __declspec(uuid("5f67eacc-d387-4b71-9637-596901d00ce0"))
/* interface */ IDeviceManagerNotification;
struct __declspec(uuid("834d959f-9c2f-40b4-bf93-44d543310d98"))
/* interface */ IEmulatorEvents;
struct __declspec(uuid("921274f0-1157-4da9-be6c-bb66b28eaaf3"))
/* interface */ IEmulatorNofitication;
struct __declspec(uuid("c7168324-a0f4-46df-b82a-548cfb08755e"))
/* interface */ IChannelEventsEx;
struct __declspec(uuid("0bb1b580-7c78-4481-8b45-3b1fbca367d6"))
/* interface */ IChannelEventsEx2;
struct __declspec(uuid("5e820c3a-37e9-4586-aebd-8b8aabf39053"))
/* interface */ IChannelAuthEvents;
struct __declspec(uuid("5ee42f14-6b90-46de-a367-ada16809c9f1"))
/* interface */ IChannel_300;
struct __declspec(uuid("f6f91964-168e-40ab-8d79-159fd8d1a196"))
/* dual interface */ IRimDisks;
struct __declspec(uuid("326e2658-dcf6-4eb2-ad5f-a617cd934556"))
/* dual interface */ IRimDisk;
struct __declspec(uuid("7712eb3e-20ec-47c4-987d-a5958682603a"))
/* dual interface */ IRimDiskEvents;
struct __declspec(uuid("da8299b6-aac0-4928-88a7-c7466017d88c"))
/* dual interface */ IVSPEvents;
struct __declspec(uuid("4c13488e-4dc6-4c3c-82ab-dc3fc12b2ac6"))
/* dual interface */ IVSPEvents2;
struct /* coclass */ DeviceManager;
struct __declspec(uuid("c716830b-a0f4-46df-b82a-548cfb08755e"))
/* interface */ IDeviceManager;
struct __declspec(uuid("c716830d-a0f4-46df-b82a-548cfb08755e"))
/* interface */ IDevices;
struct /* coclass */ DiskManager;
struct __declspec(uuid("91d3b756-e9a8-4666-860f-3a9f1fb38b23"))
/* dual interface */ IDiskManager;
struct /* coclass */ EmulatorManager;
struct __declspec(uuid("8d147846-7fc1-47f8-a778-718cb97db6dc"))
/* interface */ IEmulatorManager;
struct __declspec(uuid("0015e3d6-5939-414a-a67d-03e66eca7f01"))
/* interface */ IEmulatorManagerEvents;
struct __declspec(uuid("5085e090-72a2-4aa5-8e8a-08a1a849497a"))
/* interface */ IEmulator;
struct /* coclass */ BbClientManager;
struct __declspec(uuid("ab71de2d-7ef0-49c8-9a16-6b1ed0085edb"))
/* interface */ IBbClientManager;
struct __declspec(uuid("93a3a493-f26f-462d-a742-d668bfaeec5a"))
/* interface */ IBbClient;
struct /* coclass */ VSPMgr;
struct __declspec(uuid("abe6d5eb-950d-4d9a-86e9-2821fe7d0eb6"))
/* dual interface */ IVSPMgr;
struct /* coclass */ VSPEvents;
struct /* coclass */ VSPConnection;
struct __declspec(uuid("31b12c2f-ac32-43b7-9bba-5748e2f83575"))
/* dual interface */ IVSPConnection;
struct /* coclass */ VSP;
struct __declspec(uuid("f6cf0104-4f4a-4ebe-999d-a12d838e65b5"))
/* dual interface */ IVSP;
struct /* coclass */ RDM;
struct __declspec(uuid("4c2ed279-6c9e-476f-8737-48fcfcb54c3a"))
/* dual interface */ IRDM;
struct /* coclass */ WMC;
struct __declspec(uuid("d2f30ec6-a51e-49f1-a8c0-3c44e51b039b"))
/* dual interface */ IWMC;
struct /* coclass */ DcAll;
struct __declspec(uuid("84ffd553-52b3-485a-b3c9-7a15897a489a"))
/* dual interface */ IDcAll;
typedef struct __MIDL___MIDL_itf_BbDevMgr_0000_0006_0001 ChannelParams;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IChannelEvents, __uuidof(IChannelEvents));
_COM_SMARTPTR_TYPEDEF(IChannel, __uuidof(IChannel));
_COM_SMARTPTR_TYPEDEF(IDeviceSafe, __uuidof(IDeviceSafe));
_COM_SMARTPTR_TYPEDEF(IDeviceProperty, __uuidof(IDeviceProperty));
_COM_SMARTPTR_TYPEDEF(IDeviceProperties, __uuidof(IDeviceProperties));
_COM_SMARTPTR_TYPEDEF(IDevice, __uuidof(IDevice));
_COM_SMARTPTR_TYPEDEF(IDevice_140, __uuidof(IDevice_140));
_COM_SMARTPTR_TYPEDEF(IDeviceManagerEvents, __uuidof(IDeviceManagerEvents));
_COM_SMARTPTR_TYPEDEF(IDeviceManagerNotification, __uuidof(IDeviceManagerNotification));
_COM_SMARTPTR_TYPEDEF(IEmulatorEvents, __uuidof(IEmulatorEvents));
_COM_SMARTPTR_TYPEDEF(IEmulatorNofitication, __uuidof(IEmulatorNofitication));
_COM_SMARTPTR_TYPEDEF(IChannelEventsEx, __uuidof(IChannelEventsEx));
_COM_SMARTPTR_TYPEDEF(IChannelEventsEx2, __uuidof(IChannelEventsEx2));
_COM_SMARTPTR_TYPEDEF(IChannelAuthEvents, __uuidof(IChannelAuthEvents));
_COM_SMARTPTR_TYPEDEF(IChannel_300, __uuidof(IChannel_300));
_COM_SMARTPTR_TYPEDEF(IRimDisk, __uuidof(IRimDisk));
_COM_SMARTPTR_TYPEDEF(IRimDisks, __uuidof(IRimDisks));
_COM_SMARTPTR_TYPEDEF(IRimDiskEvents, __uuidof(IRimDiskEvents));
_COM_SMARTPTR_TYPEDEF(IVSPEvents, __uuidof(IVSPEvents));
_COM_SMARTPTR_TYPEDEF(IVSPEvents2, __uuidof(IVSPEvents2));
_COM_SMARTPTR_TYPEDEF(IDevices, __uuidof(IDevices));
_COM_SMARTPTR_TYPEDEF(IDeviceManager, __uuidof(IDeviceManager));
_COM_SMARTPTR_TYPEDEF(IDiskManager, __uuidof(IDiskManager));
_COM_SMARTPTR_TYPEDEF(IEmulatorManagerEvents, __uuidof(IEmulatorManagerEvents));
_COM_SMARTPTR_TYPEDEF(IEmulator, __uuidof(IEmulator));
_COM_SMARTPTR_TYPEDEF(IEmulatorManager, __uuidof(IEmulatorManager));
_COM_SMARTPTR_TYPEDEF(IBbClient, __uuidof(IBbClient));
_COM_SMARTPTR_TYPEDEF(IBbClientManager, __uuidof(IBbClientManager));
_COM_SMARTPTR_TYPEDEF(IVSPMgr, __uuidof(IVSPMgr));
_COM_SMARTPTR_TYPEDEF(IVSPConnection, __uuidof(IVSPConnection));
_COM_SMARTPTR_TYPEDEF(IVSP, __uuidof(IVSP));
_COM_SMARTPTR_TYPEDEF(IRDM, __uuidof(IRDM));
_COM_SMARTPTR_TYPEDEF(IWMC, __uuidof(IWMC));
_COM_SMARTPTR_TYPEDEF(IDcAll, __uuidof(IDcAll));

//
// Type library items
//

struct __declspec(uuid("c7168312-a0f4-46df-b82a-548cfb08755e"))
IChannelEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT CheckClientStatus ( );
    HRESULT OnChallenge (
        long attemptsRemaining,
        unsigned char password[20] );
    HRESULT OnNewData ( );
    HRESULT OnClose ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CheckClientStatus ( ) = 0;
      virtual HRESULT __stdcall raw_OnChallenge (
        /*[in]*/ long attemptsRemaining,
        /*[out]*/ unsigned char password[20] ) = 0;
      virtual HRESULT __stdcall raw_OnNewData ( ) = 0;
      virtual HRESULT __stdcall raw_OnClose ( ) = 0;
};

struct __declspec(uuid("c7168311-a0f4-46df-b82a-548cfb08755e"))
IChannel : IUnknown
{
    //
    // Property data
    //

    __declspec(property(put=PuthostBuffers))
    unsigned short hostBuffers;

    //
    // Wrapper methods for error-handling
    //

    void GetParams (
        ChannelParams * Params );
    void PuthostBuffers (
        unsigned short _arg1 );
    void GetPacketsAvailable (
        long * PacketsAvailable );
    HRESULT ReadPacket (
        unsigned char * data,
        long length,
        long * actual );
    HRESULT WritePacket (
        unsigned char * data,
        long length );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Params (
        /*[out]*/ ChannelParams * Params ) = 0;
      virtual HRESULT __stdcall put_hostBuffers (
        /*[in]*/ unsigned short _arg1 ) = 0;
      virtual HRESULT __stdcall get_PacketsAvailable (
        /*[out]*/ long * PacketsAvailable ) = 0;
      virtual HRESULT __stdcall raw_ReadPacket (
        /*[out]*/ unsigned char * data,
        /*[in]*/ long length,
        /*[out]*/ long * actual ) = 0;
      virtual HRESULT __stdcall raw_WritePacket (
        /*[in]*/ unsigned char * data,
        /*[in]*/ long length ) = 0;
};

struct __declspec(uuid("aefa9d6f-31df-420f-89b3-f875203055c6"))
IDeviceSafe : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IChannelPtr OpenChannelSafe (
        LPWSTR channelName,
        struct IChannelEvents * events,
        unsigned long timeUnits );
    HRESULT KillOpenChannelRequest ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OpenChannelSafe (
        /*[in]*/ LPWSTR channelName,
        /*[in]*/ struct IChannelEvents * events,
        /*[in]*/ unsigned long timeUnits,
        /*[out,retval]*/ struct IChannel * * channel ) = 0;
      virtual HRESULT __stdcall raw_KillOpenChannelRequest ( ) = 0;
};

#pragma pack(push, 2)

struct __MIDL___MIDL_itf_BbDevMgr_0000_0006_0001
{
    unsigned short maxReceiveUnit;
    unsigned short maxTransmitUnit;
    unsigned short deviceBuffers;
    unsigned short hostBuffers;
    unsigned short droppedPacketCount;
};

#pragma pack(pop)

struct __declspec(uuid("c7168310-a0f4-46df-b82a-548cfb08755e"))
IDeviceProperty : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValue))
    _variant_t Value;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _variant_t GetValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * Value ) = 0;
};

struct __declspec(uuid("c716830f-a0f4-46df-b82a-548cfb08755e"))
IDeviceProperties : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    unsigned long Count;
    __declspec(property(get=GetItem))
    IDevicePropertyPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    unsigned long GetCount ( );
    IDevicePropertyPtr GetItem (
        const _variant_t & va );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ unsigned long * Count ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT va,
        /*[out,retval]*/ struct IDeviceProperty * * deviceProperty ) = 0;
};

struct __declspec(uuid("c716830e-a0f4-46df-b82a-548cfb08755e"))
IDevice : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetProperties))
    IDevicePropertiesPtr Properties;

    //
    // Wrapper methods for error-handling
    //

    IDevicePropertiesPtr GetProperties ( );
    IChannelPtr OpenChannel (
        LPWSTR channelName,
        struct IChannelEvents * events );
    HRESULT Reset ( );
    long Equals (
        struct IDevice * other );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ struct IDeviceProperties * * deviceProperties ) = 0;
      virtual HRESULT __stdcall raw_OpenChannel (
        /*[in]*/ LPWSTR channelName,
        /*[in]*/ struct IChannelEvents * events,
        /*[out,retval]*/ struct IChannel * * channel ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_Equals (
        /*[in]*/ struct IDevice * other,
        /*[out,retval]*/ long * result ) = 0;
};

struct __declspec(uuid("895d12e1-4e20-4cba-9a8b-e80e080fad74"))
IDevice_140 : IDevice
{
    //
    // Wrapper methods for error-handling
    //

    IChannelPtr OpenChannelRedirectPwd (
        LPWSTR channelName,
        struct IChannelEvents * events );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OpenChannelRedirectPwd (
        /*[in]*/ LPWSTR channelName,
        /*[in]*/ struct IChannelEvents * events,
        /*[out,retval]*/ struct IChannel * * channel ) = 0;
};

struct __declspec(uuid("c716830c-a0f4-46df-b82a-548cfb08755e"))
IDeviceManagerEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT DeviceConnect (
        struct IDevice * device );
    HRESULT DeviceDisconnect (
        struct IDevice * device );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_DeviceConnect (
        /*[in]*/ struct IDevice * device ) = 0;
      virtual HRESULT __stdcall raw_DeviceDisconnect (
        /*[in]*/ struct IDevice * device ) = 0;
};

struct __declspec(uuid("5f67eacc-d387-4b71-9637-596901d00ce0"))
IDeviceManagerNotification : IDeviceManagerEvents
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SuspendRequest ( );
    HRESULT SuspendNotification (
        long suspending );
    HRESULT ResumeNotification ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SuspendRequest ( ) = 0;
      virtual HRESULT __stdcall raw_SuspendNotification (
        /*[in]*/ long suspending ) = 0;
      virtual HRESULT __stdcall raw_ResumeNotification ( ) = 0;
};

struct __declspec(uuid("834d959f-9c2f-40b4-bf93-44d543310d98"))
IEmulatorEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetReadData (
        unsigned char * pOutBuffer,
        long bytesToRead,
        long * pBytesRead );
    HRESULT ReadFromEmulator (
        long bytesToRead );
    HRESULT WriteToEmulator (
        unsigned char * pInBuffer,
        long bytesToWrite,
        long * pBytesWritten );
    HRESULT GetEmulatorAddress (
        unsigned char * pAddrBuffer,
        long addrBuffSize,
        long * pBytesWritten );
    HRESULT GetEmulatorPower (
        unsigned long * pPowerLevel );
    HRESULT CancelIo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetReadData (
        /*[out]*/ unsigned char * pOutBuffer,
        /*[in]*/ long bytesToRead,
        /*[out]*/ long * pBytesRead ) = 0;
      virtual HRESULT __stdcall raw_ReadFromEmulator (
        /*[in]*/ long bytesToRead ) = 0;
      virtual HRESULT __stdcall raw_WriteToEmulator (
        /*[in]*/ unsigned char * pInBuffer,
        /*[in]*/ long bytesToWrite,
        /*[out]*/ long * pBytesWritten ) = 0;
      virtual HRESULT __stdcall raw_GetEmulatorAddress (
        /*[out]*/ unsigned char * pAddrBuffer,
        /*[in]*/ long addrBuffSize,
        /*[out]*/ long * pBytesWritten ) = 0;
      virtual HRESULT __stdcall raw_GetEmulatorPower (
        /*[out]*/ unsigned long * pPowerLevel ) = 0;
      virtual HRESULT __stdcall raw_CancelIo ( ) = 0;
};

struct __declspec(uuid("921274f0-1157-4da9-be6c-bb66b28eaaf3"))
IEmulatorNofitication : IEmulatorEvents
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnLowBattery ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnLowBattery ( ) = 0;
};

struct __declspec(uuid("c7168324-a0f4-46df-b82a-548cfb08755e"))
IChannelEventsEx : IChannelEvents
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnChallengeEx (
        long maxAttempts,
        long attemptsRemaining,
        unsigned char password[20] );
    HRESULT OnCanSend (
        long numPackets );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnChallengeEx (
        /*[in]*/ long maxAttempts,
        /*[in]*/ long attemptsRemaining,
        /*[out]*/ unsigned char password[20] ) = 0;
      virtual HRESULT __stdcall raw_OnCanSend (
        /*[in]*/ long numPackets ) = 0;
};

struct __declspec(uuid("0bb1b580-7c78-4481-8b45-3b1fbca367d6"))
IChannelEventsEx2 : IChannelEventsEx
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnChallenge2 (
        long maxAttempts,
        long attemptsRemaining,
        unsigned char password[100] );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnChallenge2 (
        /*[in]*/ long maxAttempts,
        /*[in]*/ long attemptsRemaining,
        /*[out]*/ unsigned char password[100] ) = 0;
};

struct __declspec(uuid("5e820c3a-37e9-4586-aebd-8b8aabf39053"))
IChannelAuthEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnEncryptionChallenge (
        long maxAttempts,
        long attemptsRemaining,
        unsigned char * encryptedBlob,
        long encryptedBlobLen,
        unsigned char * decryptedBlob,
        long decryptedMaxLen,
        long * decryptedBlobLen );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnEncryptionChallenge (
        /*[in]*/ long maxAttempts,
        /*[in]*/ long attemptsRemaining,
        /*[in]*/ unsigned char * encryptedBlob,
        /*[in]*/ long encryptedBlobLen,
        /*[out]*/ unsigned char * decryptedBlob,
        /*[in]*/ long decryptedMaxLen,
        /*[out]*/ long * decryptedBlobLen ) = 0;
};

struct __declspec(uuid("5ee42f14-6b90-46de-a367-ada16809c9f1"))
IChannel_300 : IChannel
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetWriteQueueInfo (
        long * p_lNumQueuedPkts,
        long * p_lNumQueuedBytes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetWriteQueueInfo (
        /*[out]*/ long * p_lNumQueuedPkts,
        /*[out]*/ long * p_lNumQueuedBytes ) = 0;
};

struct __declspec(uuid("326e2658-dcf6-4eb2-ad5f-a617cd934556"))
IRimDisk : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDeviceSerialNumber))
    _variant_t DeviceSerialNumber;
    __declspec(property(get=GetDeviceMountPoint))
    _variant_t DeviceMountPoint;
    __declspec(property(get=GetIsMounted))
    long IsMounted;
    __declspec(property(get=GetIsInternal))
    long IsInternal;
    __declspec(property(get=GetVolumeName))
    _variant_t VolumeName;
    __declspec(property(get=GetFormatTypeString))
    _variant_t FormatTypeString;
    __declspec(property(get=GetClusterSize))
    unsigned long ClusterSize;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetDeviceSerialNumber ( );
    _variant_t GetDeviceMountPoint ( );
    HRESULT Eject ( );
    long GetIsMounted ( );
    long GetIsInternal ( );
    _variant_t GetVolumeName ( );
    _variant_t GetFormatTypeString ( );
    unsigned long GetClusterSize ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DeviceSerialNumber (
        /*[out,retval]*/ VARIANT * Name ) = 0;
      virtual HRESULT __stdcall get_DeviceMountPoint (
        /*[out,retval]*/ VARIANT * __MIDL__IRimDisk0000 ) = 0;
      virtual HRESULT __stdcall raw_Eject ( ) = 0;
      virtual HRESULT __stdcall get_IsMounted (
        /*[out,retval]*/ long * __MIDL__IRimDisk0001 ) = 0;
      virtual HRESULT __stdcall get_IsInternal (
        /*[out,retval]*/ long * __MIDL__IRimDisk0002 ) = 0;
      virtual HRESULT __stdcall get_VolumeName (
        /*[out,retval]*/ VARIANT * Name ) = 0;
      virtual HRESULT __stdcall get_FormatTypeString (
        /*[out,retval]*/ VARIANT * Name ) = 0;
      virtual HRESULT __stdcall get_ClusterSize (
        /*[out,retval]*/ unsigned long * size ) = 0;
};

struct __declspec(uuid("f6f91964-168e-40ab-8d79-159fd8d1a196"))
IRimDisks : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    unsigned long Count;

    //
    // Wrapper methods for error-handling
    //

    unsigned long GetCount ( );
    IRimDiskPtr Item (
        unsigned long index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Item (
        unsigned long index,
        /*[out,retval]*/ struct IRimDisk * * device ) = 0;
};

struct __declspec(uuid("7712eb3e-20ec-47c4-987d-a5958682603a"))
IRimDiskEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT DiskAppeared (
        struct IRimDisk * disk );
    HRESULT DiskDisappeared (
        struct IRimDisk * disk );
    HRESULT DiskMounted (
        struct IRimDisk * disk );
    HRESULT DiskUnmounted (
        struct IRimDisk * disk );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_DiskAppeared (
        /*[in]*/ struct IRimDisk * disk ) = 0;
      virtual HRESULT __stdcall raw_DiskDisappeared (
        /*[in]*/ struct IRimDisk * disk ) = 0;
      virtual HRESULT __stdcall raw_DiskMounted (
        /*[in]*/ struct IRimDisk * disk ) = 0;
      virtual HRESULT __stdcall raw_DiskUnmounted (
        /*[in]*/ struct IRimDisk * disk ) = 0;
};

struct __declspec(uuid("da8299b6-aac0-4928-88a7-c7466017d88c"))
IVSPEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT isActive (
        long active );
    HRESULT handlePasswordRequiredEx (
        int attemptsRemaining,
        int totalAttempts,
        unsigned char passwordStr[20],
        int * retVal );
    HRESULT authResult (
        long success );
    HRESULT handlePasswordRequired (
        int attemptsRemaining,
        unsigned char passwordStr[20],
        int * retVal );
    HRESULT handleLog (
        unsigned long logLevel,
        char * log,
        int * retVal );
    HRESULT serialNotSupported ( );
    HRESULT OnNewData (
        long numPackets );
    HRESULT ping ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_isActive (
        /*[in]*/ long active ) = 0;
      virtual HRESULT __stdcall raw_handlePasswordRequiredEx (
        /*[in]*/ int attemptsRemaining,
        /*[in]*/ int totalAttempts,
        /*[out]*/ unsigned char passwordStr[20],
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_authResult (
        /*[in]*/ long success ) = 0;
      virtual HRESULT __stdcall raw_handlePasswordRequired (
        int attemptsRemaining,
        /*[out]*/ unsigned char passwordStr[20],
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_handleLog (
        /*[in]*/ unsigned long logLevel,
        /*[in]*/ char * log,
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_serialNotSupported ( ) = 0;
      virtual HRESULT __stdcall raw_OnNewData (
        /*[in]*/ long numPackets ) = 0;
      virtual HRESULT __stdcall raw_ping ( ) = 0;
};

struct __declspec(uuid("4c13488e-4dc6-4c3c-82ab-dc3fc12b2ac6"))
IVSPEvents2 : IVSPEvents
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT handlePasswordRequiredEx2 (
        int attemptsRemaining,
        int totalAttempts,
        unsigned char passwordStr[100],
        int * retVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_handlePasswordRequiredEx2 (
        /*[in]*/ int attemptsRemaining,
        /*[in]*/ int totalAttempts,
        /*[out]*/ unsigned char passwordStr[100],
        /*[out]*/ int * retVal ) = 0;
};

struct __declspec(uuid("ba3d0120-e617-4f66-adca-585cc2fb86db"))
DeviceManager;
    // [ default ] interface IDeviceManager

struct __declspec(uuid("c716830d-a0f4-46df-b82a-548cfb08755e"))
IDevices : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    unsigned long Count;

    //
    // Wrapper methods for error-handling
    //

    unsigned long GetCount ( );
    IDevicePtr Item (
        unsigned long index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ unsigned long * pVal ) = 0;
      virtual HRESULT __stdcall raw_Item (
        unsigned long index,
        /*[out,retval]*/ struct IDevice * * device ) = 0;
};

struct __declspec(uuid("c716830b-a0f4-46df-b82a-548cfb08755e"))
IDeviceManager : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDevices))
    IDevicesPtr Devices;

    //
    // Wrapper methods for error-handling
    //

    IDevicesPtr GetDevices ( );
    HRESULT Advise (
        struct IDeviceManagerEvents * events,
        unsigned long * cookie );
    HRESULT Unadvise (
        unsigned long cookie );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Devices (
        /*[out,retval]*/ struct IDevices * * deviceEnum ) = 0;
      virtual HRESULT __stdcall raw_Advise (
        /*[in]*/ struct IDeviceManagerEvents * events,
        /*[out]*/ unsigned long * cookie ) = 0;
      virtual HRESULT __stdcall raw_Unadvise (
        /*[in]*/ unsigned long cookie ) = 0;
};

struct __declspec(uuid("73edfa5b-1f53-455d-ad1a-2113058fca31"))
DiskManager;
    // [ default ] interface IDiskManager

struct __declspec(uuid("91d3b756-e9a8-4666-860f-3a9f1fb38b23"))
IDiskManager : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDisks))
    IRimDisksPtr Disks;

    //
    // Wrapper methods for error-handling
    //

    HRESULT AdviseDiskEvents (
        struct IRimDiskEvents * events,
        unsigned long * cookie );
    HRESULT UnadviseDiskEvents (
        unsigned long cookie );
    IRimDisksPtr GetDisks ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AdviseDiskEvents (
        /*[in]*/ struct IRimDiskEvents * events,
        /*[out]*/ unsigned long * cookie ) = 0;
      virtual HRESULT __stdcall raw_UnadviseDiskEvents (
        /*[in]*/ unsigned long cookie ) = 0;
      virtual HRESULT __stdcall get_Disks (
        /*[out,retval]*/ struct IRimDisks * * deviceEnum ) = 0;
};

struct __declspec(uuid("ee7f6b66-ac97-41cf-bd88-372ddb786db6"))
EmulatorManager;
    // [ default ] interface IEmulatorManager

struct __declspec(uuid("0015e3d6-5939-414a-a67d-03e66eca7f01"))
IEmulatorManagerEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT HasEmulatorClients ( );
    HRESULT NoEmulatorClients ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_HasEmulatorClients ( ) = 0;
      virtual HRESULT __stdcall raw_NoEmulatorClients ( ) = 0;
};

struct __declspec(uuid("5085e090-72a2-4aa5-8e8a-08a1a849497a"))
IEmulator : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ConnectEmulator (
        struct IEmulatorEvents * events );
    HRESULT DisconnectEmulator (
        struct IEmulatorEvents * events );
    HRESULT WriteDone (
        unsigned long bytesCopied );
    HRESULT ReadReady ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ConnectEmulator (
        /*[in]*/ struct IEmulatorEvents * events ) = 0;
      virtual HRESULT __stdcall raw_DisconnectEmulator (
        /*[in]*/ struct IEmulatorEvents * events ) = 0;
      virtual HRESULT __stdcall raw_WriteDone (
        /*[in]*/ unsigned long bytesCopied ) = 0;
      virtual HRESULT __stdcall raw_ReadReady ( ) = 0;
};

struct __declspec(uuid("8d147846-7fc1-47f8-a778-718cb97db6dc"))
IEmulatorManager : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IEmulatorPtr RegisterEmulator (
        struct IEmulatorManagerEvents * events );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_RegisterEmulator (
        /*[in]*/ struct IEmulatorManagerEvents * events,
        /*[out,retval]*/ struct IEmulator * * emulator ) = 0;
};

struct __declspec(uuid("0c1eb979-8ec7-46e8-8097-246957d6b94c"))
BbClientManager;
    // [ default ] interface IBbClientManager

struct __declspec(uuid("93a3a493-f26f-462d-a742-d668bfaeec5a"))
IBbClient : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT DeviceConnect ( );
    HRESULT DeviceDisconnect ( );
    HRESULT WriteDone (
        unsigned long bytesCopied );
    HRESULT ReadReady (
        unsigned char * pInBuffer,
        long bytesToRead );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_DeviceConnect ( ) = 0;
      virtual HRESULT __stdcall raw_DeviceDisconnect ( ) = 0;
      virtual HRESULT __stdcall raw_WriteDone (
        /*[in]*/ unsigned long bytesCopied ) = 0;
      virtual HRESULT __stdcall raw_ReadReady (
        /*[in]*/ unsigned char * pInBuffer,
        /*[in]*/ long bytesToRead ) = 0;
};

struct __declspec(uuid("ab71de2d-7ef0-49c8-9a16-6b1ed0085edb"))
IBbClientManager : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    IBbClientPtr RegisterBbClient ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_RegisterBbClient (
        /*[out,retval]*/ struct IBbClient * * bbClient ) = 0;
};

struct __declspec(uuid("4b66dd3f-2e6e-4f7c-b38c-e32608820825"))
VSPMgr;
    // [ default ] interface IVSPMgr

struct __declspec(uuid("abe6d5eb-950d-4d9a-86e9-2821fe7d0eb6"))
IVSPMgr : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Advise (
        struct IVSPEvents * events,
        unsigned long * cookie );
    HRESULT VSPInitializeNotify (
        int * retVal );
    HRESULT VSPInitialize (
        int * retVal );
    HRESULT VSPUninitialize (
        long force,
        int * retVal );
    HRESULT Unadvise (
        unsigned long cookie );
    HRESULT RDMInitialize (
        int * retVal );
    HRESULT RDMConnect (
        struct IDevice * device,
        int * retVal );
    HRESULT RDMDisconnect (
        long force,
        int * retVal );
    HRESULT RDMQueryComPorts (
        unsigned char * buf,
        unsigned int bufSz,
        int * retVal );
    HRESULT RDMUninitialize (
        int * retVal );
    HRESULT WMCStartup (
        int * retVal );
    HRESULT WMCShutdown (
        int * retVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Advise (
        /*[in]*/ struct IVSPEvents * events,
        /*[out]*/ unsigned long * cookie ) = 0;
      virtual HRESULT __stdcall raw_VSPInitializeNotify (
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_VSPInitialize (
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_VSPUninitialize (
        long force,
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_Unadvise (
        /*[in]*/ unsigned long cookie ) = 0;
      virtual HRESULT __stdcall raw_RDMInitialize (
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_RDMConnect (
        /*[in]*/ struct IDevice * device,
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_RDMDisconnect (
        /*[in]*/ long force,
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_RDMQueryComPorts (
        /*[out]*/ unsigned char * buf,
        unsigned int bufSz,
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_RDMUninitialize (
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_WMCStartup (
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_WMCShutdown (
        /*[out]*/ int * retVal ) = 0;
};

struct __declspec(uuid("cbfe3183-6b67-4702-b605-afb4ec2ec808"))
VSPEvents;
    // [ default ] interface IVSPEvents

struct __declspec(uuid("d41c1e5b-0566-4bb1-be72-1a5407349ca6"))
VSPConnection;
    // [ default ] interface IVSPConnection

struct __declspec(uuid("31b12c2f-ac32-43b7-9bba-5748e2f83575"))
IVSPConnection : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT RegisterVSPManager (
        struct IVSPMgr * mgr );
    HRESULT UninitConn (
        unsigned long cookie );
    HRESULT ImAlive ( );
    HRESULT SetCookie (
        unsigned long cookie );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_RegisterVSPManager (
        /*[in]*/ struct IVSPMgr * mgr ) = 0;
      virtual HRESULT __stdcall raw_UninitConn (
        /*[in]*/ unsigned long cookie ) = 0;
      virtual HRESULT __stdcall raw_ImAlive ( ) = 0;
      virtual HRESULT __stdcall raw_SetCookie (
        /*[in]*/ unsigned long cookie ) = 0;
};

struct __declspec(uuid("e4def9d9-954f-4794-9651-23e2afafbec9"))
VSP;
    // [ default ] interface IVSP

struct __declspec(uuid("f6cf0104-4f4a-4ebe-999d-a12d838e65b5"))
IVSP : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Initialize (
        int * retVal );
    HRESULT Uninitialize (
        long force,
        int * retVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Initialize (
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_Uninitialize (
        /*[in]*/ long force,
        /*[out]*/ int * retVal ) = 0;
};

struct __declspec(uuid("95d9fa15-83bd-43cd-a709-d7cce0f89656"))
RDM;
    // [ default ] interface IRDM

struct __declspec(uuid("4c2ed279-6c9e-476f-8737-48fcfcb54c3a"))
IRDM : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT InitializeRDM (
        int * retVal );
    HRESULT UninitializeRDM (
        int * retVal );
    HRESULT ConnectRDM (
        struct IDevice * device,
        int * retVal );
    HRESULT DisconnectRDM (
        long force,
        int * retVal );
    HRESULT QueryComPortsRDM (
        unsigned char * buf,
        unsigned int bufSz,
        int * retVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_InitializeRDM (
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_UninitializeRDM (
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_ConnectRDM (
        /*[in]*/ struct IDevice * device,
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_DisconnectRDM (
        /*[in]*/ long force,
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_QueryComPortsRDM (
        /*[out]*/ unsigned char * buf,
        /*[in]*/ unsigned int bufSz,
        /*[out]*/ int * retVal ) = 0;
};

struct __declspec(uuid("41f8ad09-c902-428e-8689-56cad3b9abac"))
WMC;
    // [ default ] interface IWMC

struct __declspec(uuid("d2f30ec6-a51e-49f1-a8c0-3c44e51b039b"))
IWMC : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Startup (
        int * retVal );
    HRESULT Shutdown (
        int * retVal );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Startup (
        /*[out]*/ int * retVal ) = 0;
      virtual HRESULT __stdcall raw_Shutdown (
        /*[out]*/ int * retVal ) = 0;
};

struct __declspec(uuid("0b19af3d-75c7-447b-aaef-f0521160161c"))
DcAll;
    // [ default ] interface IDcAll

struct __declspec(uuid("84ffd553-52b3-485a-b3c9-7a15897a489a"))
IDcAll : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT DisconnectAll ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_DisconnectAll ( ) = 0;
};

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_BBDEVMGRLib =
    {0x3205cf2e,0xca6a,0x40fa,{0x83,0x8c,0xec,0x38,0xe0,0xab,0x74,0xf0}};
extern "C" const GUID __declspec(selectany) IID_IChannelEvents =
    {0xc7168312,0xa0f4,0x46df,{0xb8,0x2a,0x54,0x8c,0xfb,0x08,0x75,0x5e}};
extern "C" const GUID __declspec(selectany) IID_IChannel =
    {0xc7168311,0xa0f4,0x46df,{0xb8,0x2a,0x54,0x8c,0xfb,0x08,0x75,0x5e}};
extern "C" const GUID __declspec(selectany) IID_IDeviceSafe =
    {0xaefa9d6f,0x31df,0x420f,{0x89,0xb3,0xf8,0x75,0x20,0x30,0x55,0xc6}};
extern "C" const GUID __declspec(selectany) IID_IDeviceProperty =
    {0xc7168310,0xa0f4,0x46df,{0xb8,0x2a,0x54,0x8c,0xfb,0x08,0x75,0x5e}};
extern "C" const GUID __declspec(selectany) IID_IDeviceProperties =
    {0xc716830f,0xa0f4,0x46df,{0xb8,0x2a,0x54,0x8c,0xfb,0x08,0x75,0x5e}};
extern "C" const GUID __declspec(selectany) IID_IDevice =
    {0xc716830e,0xa0f4,0x46df,{0xb8,0x2a,0x54,0x8c,0xfb,0x08,0x75,0x5e}};
extern "C" const GUID __declspec(selectany) IID_IDevice_140 =
    {0x895d12e1,0x4e20,0x4cba,{0x9a,0x8b,0xe8,0x0e,0x08,0x0f,0xad,0x74}};
extern "C" const GUID __declspec(selectany) IID_IDeviceManagerEvents =
    {0xc716830c,0xa0f4,0x46df,{0xb8,0x2a,0x54,0x8c,0xfb,0x08,0x75,0x5e}};
extern "C" const GUID __declspec(selectany) IID_IDeviceManagerNotification =
    {0x5f67eacc,0xd387,0x4b71,{0x96,0x37,0x59,0x69,0x01,0xd0,0x0c,0xe0}};
extern "C" const GUID __declspec(selectany) IID_IEmulatorEvents =
    {0x834d959f,0x9c2f,0x40b4,{0xbf,0x93,0x44,0xd5,0x43,0x31,0x0d,0x98}};
extern "C" const GUID __declspec(selectany) IID_IEmulatorNofitication =
    {0x921274f0,0x1157,0x4da9,{0xbe,0x6c,0xbb,0x66,0xb2,0x8e,0xaa,0xf3}};
extern "C" const GUID __declspec(selectany) IID_IChannelEventsEx =
    {0xc7168324,0xa0f4,0x46df,{0xb8,0x2a,0x54,0x8c,0xfb,0x08,0x75,0x5e}};
extern "C" const GUID __declspec(selectany) IID_IChannelEventsEx2 =
    {0x0bb1b580,0x7c78,0x4481,{0x8b,0x45,0x3b,0x1f,0xbc,0xa3,0x67,0xd6}};
extern "C" const GUID __declspec(selectany) IID_IChannelAuthEvents =
    {0x5e820c3a,0x37e9,0x4586,{0xae,0xbd,0x8b,0x8a,0xab,0xf3,0x90,0x53}};
extern "C" const GUID __declspec(selectany) IID_IChannel_300 =
    {0x5ee42f14,0x6b90,0x46de,{0xa3,0x67,0xad,0xa1,0x68,0x09,0xc9,0xf1}};
extern "C" const GUID __declspec(selectany) IID_IRimDisk =
    {0x326e2658,0xdcf6,0x4eb2,{0xad,0x5f,0xa6,0x17,0xcd,0x93,0x45,0x56}};
extern "C" const GUID __declspec(selectany) IID_IRimDisks =
    {0xf6f91964,0x168e,0x40ab,{0x8d,0x79,0x15,0x9f,0xd8,0xd1,0xa1,0x96}};
extern "C" const GUID __declspec(selectany) IID_IRimDiskEvents =
    {0x7712eb3e,0x20ec,0x47c4,{0x98,0x7d,0xa5,0x95,0x86,0x82,0x60,0x3a}};
extern "C" const GUID __declspec(selectany) IID_IVSPEvents =
    {0xda8299b6,0xaac0,0x4928,{0x88,0xa7,0xc7,0x46,0x60,0x17,0xd8,0x8c}};
extern "C" const GUID __declspec(selectany) IID_IVSPEvents2 =
    {0x4c13488e,0x4dc6,0x4c3c,{0x82,0xab,0xdc,0x3f,0xc1,0x2b,0x2a,0xc6}};
extern "C" const GUID __declspec(selectany) CLSID_DeviceManager =
    {0xba3d0120,0xe617,0x4f66,{0xad,0xca,0x58,0x5c,0xc2,0xfb,0x86,0xdb}};
extern "C" const GUID __declspec(selectany) IID_IDevices =
    {0xc716830d,0xa0f4,0x46df,{0xb8,0x2a,0x54,0x8c,0xfb,0x08,0x75,0x5e}};
extern "C" const GUID __declspec(selectany) IID_IDeviceManager =
    {0xc716830b,0xa0f4,0x46df,{0xb8,0x2a,0x54,0x8c,0xfb,0x08,0x75,0x5e}};
extern "C" const GUID __declspec(selectany) CLSID_DiskManager =
    {0x73edfa5b,0x1f53,0x455d,{0xad,0x1a,0x21,0x13,0x05,0x8f,0xca,0x31}};
extern "C" const GUID __declspec(selectany) IID_IDiskManager =
    {0x91d3b756,0xe9a8,0x4666,{0x86,0x0f,0x3a,0x9f,0x1f,0xb3,0x8b,0x23}};
extern "C" const GUID __declspec(selectany) CLSID_EmulatorManager =
    {0xee7f6b66,0xac97,0x41cf,{0xbd,0x88,0x37,0x2d,0xdb,0x78,0x6d,0xb6}};
extern "C" const GUID __declspec(selectany) IID_IEmulatorManagerEvents =
    {0x0015e3d6,0x5939,0x414a,{0xa6,0x7d,0x03,0xe6,0x6e,0xca,0x7f,0x01}};
extern "C" const GUID __declspec(selectany) IID_IEmulator =
    {0x5085e090,0x72a2,0x4aa5,{0x8e,0x8a,0x08,0xa1,0xa8,0x49,0x49,0x7a}};
extern "C" const GUID __declspec(selectany) IID_IEmulatorManager =
    {0x8d147846,0x7fc1,0x47f8,{0xa7,0x78,0x71,0x8c,0xb9,0x7d,0xb6,0xdc}};
extern "C" const GUID __declspec(selectany) CLSID_BbClientManager =
    {0x0c1eb979,0x8ec7,0x46e8,{0x80,0x97,0x24,0x69,0x57,0xd6,0xb9,0x4c}};
extern "C" const GUID __declspec(selectany) IID_IBbClient =
    {0x93a3a493,0xf26f,0x462d,{0xa7,0x42,0xd6,0x68,0xbf,0xae,0xec,0x5a}};
extern "C" const GUID __declspec(selectany) IID_IBbClientManager =
    {0xab71de2d,0x7ef0,0x49c8,{0x9a,0x16,0x6b,0x1e,0xd0,0x08,0x5e,0xdb}};
extern "C" const GUID __declspec(selectany) CLSID_VSPMgr =
    {0x4b66dd3f,0x2e6e,0x4f7c,{0xb3,0x8c,0xe3,0x26,0x08,0x82,0x08,0x25}};
extern "C" const GUID __declspec(selectany) IID_IVSPMgr =
    {0xabe6d5eb,0x950d,0x4d9a,{0x86,0xe9,0x28,0x21,0xfe,0x7d,0x0e,0xb6}};
extern "C" const GUID __declspec(selectany) CLSID_VSPEvents =
    {0xcbfe3183,0x6b67,0x4702,{0xb6,0x05,0xaf,0xb4,0xec,0x2e,0xc8,0x08}};
extern "C" const GUID __declspec(selectany) CLSID_VSPConnection =
    {0xd41c1e5b,0x0566,0x4bb1,{0xbe,0x72,0x1a,0x54,0x07,0x34,0x9c,0xa6}};
extern "C" const GUID __declspec(selectany) IID_IVSPConnection =
    {0x31b12c2f,0xac32,0x43b7,{0x9b,0xba,0x57,0x48,0xe2,0xf8,0x35,0x75}};
extern "C" const GUID __declspec(selectany) CLSID_VSP =
    {0xe4def9d9,0x954f,0x4794,{0x96,0x51,0x23,0xe2,0xaf,0xaf,0xbe,0xc9}};
extern "C" const GUID __declspec(selectany) IID_IVSP =
    {0xf6cf0104,0x4f4a,0x4ebe,{0x99,0x9d,0xa1,0x2d,0x83,0x8e,0x65,0xb5}};
extern "C" const GUID __declspec(selectany) CLSID_RDM =
    {0x95d9fa15,0x83bd,0x43cd,{0xa7,0x09,0xd7,0xcc,0xe0,0xf8,0x96,0x56}};
extern "C" const GUID __declspec(selectany) IID_IRDM =
    {0x4c2ed279,0x6c9e,0x476f,{0x87,0x37,0x48,0xfc,0xfc,0xb5,0x4c,0x3a}};
extern "C" const GUID __declspec(selectany) CLSID_WMC =
    {0x41f8ad09,0xc902,0x428e,{0x86,0x89,0x56,0xca,0xd3,0xb9,0xab,0xac}};
extern "C" const GUID __declspec(selectany) IID_IWMC =
    {0xd2f30ec6,0xa51e,0x49f1,{0xa8,0xc0,0x3c,0x44,0xe5,0x1b,0x03,0x9b}};
extern "C" const GUID __declspec(selectany) CLSID_DcAll =
    {0x0b19af3d,0x75c7,0x447b,{0xaa,0xef,0xf0,0x52,0x11,0x60,0x16,0x1c}};
extern "C" const GUID __declspec(selectany) IID_IDcAll =
    {0x84ffd553,0x52b3,0x485a,{0xb3,0xc9,0x7a,0x15,0x89,0x7a,0x48,0x9a}};

//
// Wrapper method implementations
//

#include "c:\program files (x86)\research in motion\blackberry jde 4.5.0\samples\usbclient - copie\debug\bbdevmgr.tli"

#pragma pack(pop)
